.TH "/home/deng/Project/autobot-feature-decision/ros/src/computing/perception/detection/lidar_detector/packages/lidar_euclidean_cluster_detect/nodes/lidar_euclidean_cluster_detect/lidar_euclidean_cluster_detect.cpp" 3 "Fri May 22 2020" "Autoware_Doxygen" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/deng/Project/autobot-feature-decision/ros/src/computing/perception/detection/lidar_detector/packages/lidar_euclidean_cluster_detect/nodes/lidar_euclidean_cluster_detect/lidar_euclidean_cluster_detect.cpp \- 
.SH SYNOPSIS
.br
.PP
\fC#include <iostream>\fP
.br
\fC#include <vector>\fP
.br
\fC#include <string>\fP
.br
\fC#include <sstream>\fP
.br
\fC#include <limits>\fP
.br
\fC#include <cmath>\fP
.br
\fC#include <ros/ros\&.h>\fP
.br
\fC#include <pcl_conversions/pcl_conversions\&.h>\fP
.br
\fC#include <pcl/PCLPointCloud2\&.h>\fP
.br
\fC#include <pcl/conversions\&.h>\fP
.br
\fC#include <pcl_ros/transforms\&.h>\fP
.br
\fC#include <pcl_ros/point_cloud\&.h>\fP
.br
\fC#include <pcl/ModelCoefficients\&.h>\fP
.br
\fC#include <pcl/point_types\&.h>\fP
.br
\fC#include <pcl/filters/extract_indices\&.h>\fP
.br
\fC#include <pcl/filters/voxel_grid\&.h>\fP
.br
\fC#include <pcl/filters/conditional_removal\&.h>\fP
.br
\fC#include <pcl/features/normal_3d\&.h>\fP
.br
\fC#include <pcl/features/normal_3d_omp\&.h>\fP
.br
\fC#include <pcl/features/don\&.h>\fP
.br
\fC#include <pcl/features/fpfh_omp\&.h>\fP
.br
\fC#include <pcl/kdtree/kdtree\&.h>\fP
.br
\fC#include <pcl/sample_consensus/method_types\&.h>\fP
.br
\fC#include <pcl/sample_consensus/model_types\&.h>\fP
.br
\fC#include <pcl/segmentation/sac_segmentation\&.h>\fP
.br
\fC#include <pcl/segmentation/extract_clusters\&.h>\fP
.br
\fC#include <pcl/segmentation/conditional_euclidean_clustering\&.h>\fP
.br
\fC#include <pcl/common/common\&.h>\fP
.br
\fC#include <pcl/search/organized\&.h>\fP
.br
\fC#include <pcl/search/kdtree\&.h>\fP
.br
\fC#include <std_msgs/Float32MultiArray\&.h>\fP
.br
\fC#include <std_msgs/MultiArrayLayout\&.h>\fP
.br
\fC#include <std_msgs/MultiArrayDimension\&.h>\fP
.br
\fC#include 'autoware_msgs/Centroids\&.h'\fP
.br
\fC#include 'autoware_msgs/CloudCluster\&.h'\fP
.br
\fC#include 'autoware_msgs/CloudClusterArray\&.h'\fP
.br
\fC#include 'autoware_msgs/DetectedObject\&.h'\fP
.br
\fC#include 'autoware_msgs/DetectedObjectArray\&.h'\fP
.br
\fC#include <vector_map/vector_map\&.h>\fP
.br
\fC#include <tf/tf\&.h>\fP
.br
\fC#include <yaml\-cpp/yaml\&.h>\fP
.br
\fC#include <opencv/cv\&.h>\fP
.br
\fC#include <opencv/highgui\&.h>\fP
.br
\fC#include <opencv2/core/version\&.hpp>\fP
.br
\fC#include <opencv2/contrib/contrib\&.hpp>\fP
.br
\fC#include 'cluster\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fB__APP_NAME__\fP   'euclidean_clustering'"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "tf::StampedTransform \fBfindTransform\fP (const std::string &in_target_frame, const std::string &in_source_frame)"
.br
.ti -1c
.RI "\fBgeometry_msgs::Point\fP \fBtransformPoint\fP (const \fBgeometry_msgs::Point\fP &point, const tf::Transform &tf)"
.br
.ti -1c
.RI "void \fBtransformBoundingBox\fP (const jsk_recognition_msgs::BoundingBox &in_boundingbox, jsk_recognition_msgs::BoundingBox &out_boundingbox, const std::string &in_target_frame, const std_msgs::Header &in_header)"
.br
.ti -1c
.RI "void \fBpublishDetectedObjects\fP (const autoware_msgs::CloudClusterArray &in_clusters)"
.br
.ti -1c
.RI "void \fBpublishCloudClusters\fP (const ros::Publisher *in_publisher, const autoware_msgs::CloudClusterArray &in_clusters, const std::string &in_target_frame, const std_msgs::Header &in_header)"
.br
.ti -1c
.RI "void \fBpublishCentroids\fP (const ros::Publisher *in_publisher, const autoware_msgs::Centroids &in_centroids, const std::string &in_target_frame, const std_msgs::Header &in_header)"
.br
.ti -1c
.RI "void \fBpublishCloud\fP (const ros::Publisher *in_publisher, const \fBpcl::PointCloud\fP< pcl::PointXYZ >::Ptr in_cloud_to_publish_ptr)"
.br
.ti -1c
.RI "void \fBpublishColorCloud\fP (const ros::Publisher *in_publisher, const \fBpcl::PointCloud\fP< pcl::PointXYZRGB >::Ptr in_cloud_to_publish_ptr)"
.br
.ti -1c
.RI "void \fBkeepLanePoints\fP (const \fBpcl::PointCloud\fP< pcl::PointXYZ >::Ptr in_cloud_ptr, \fBpcl::PointCloud\fP< pcl::PointXYZ >::Ptr out_cloud_ptr, float in_left_lane_threshold=1\&.5, float in_right_lane_threshold=1\&.5)"
.br
.ti -1c
.RI "std::vector< \fBClusterPtr\fP > \fBclusterAndColor\fP (const \fBpcl::PointCloud\fP< pcl::PointXYZ >::Ptr in_cloud_ptr, \fBpcl::PointCloud\fP< pcl::PointXYZRGB >::Ptr out_cloud_ptr, autoware_msgs::Centroids &in_out_centroids, double in_max_cluster_distance=0\&.5)"
.br
.ti -1c
.RI "void \fBcheckClusterMerge\fP (size_t in_cluster_id, std::vector< \fBClusterPtr\fP > &in_clusters, std::vector< bool > &in_out_visited_clusters, std::vector< size_t > &out_merge_indices, double in_merge_threshold)"
.br
.ti -1c
.RI "void \fBmergeClusters\fP (const std::vector< \fBClusterPtr\fP > &in_clusters, std::vector< \fBClusterPtr\fP > &out_clusters, std::vector< size_t > in_merge_indices, const size_t &current_index, std::vector< bool > &in_out_merged_clusters)"
.br
.ti -1c
.RI "void \fBcheckAllForMerge\fP (std::vector< \fBClusterPtr\fP > &in_clusters, std::vector< \fBClusterPtr\fP > &out_clusters, float in_merge_threshold)"
.br
.ti -1c
.RI "void \fBsegmentByDistance\fP (const \fBpcl::PointCloud\fP< pcl::PointXYZ >::Ptr in_cloud_ptr, \fBpcl::PointCloud\fP< pcl::PointXYZRGB >::Ptr out_cloud_ptr, autoware_msgs::Centroids &in_out_centroids, autoware_msgs::CloudClusterArray &in_out_clusters)"
.br
.ti -1c
.RI "void \fBremoveFloor\fP (const \fBpcl::PointCloud\fP< pcl::PointXYZ >::Ptr in_cloud_ptr, \fBpcl::PointCloud\fP< pcl::PointXYZ >::Ptr out_nofloor_cloud_ptr, \fBpcl::PointCloud\fP< pcl::PointXYZ >::Ptr out_onlyfloor_cloud_ptr, float in_max_height=0\&.2, float in_floor_max_angle=0\&.1)"
.br
.ti -1c
.RI "void \fBdownsampleCloud\fP (const \fBpcl::PointCloud\fP< pcl::PointXYZ >::Ptr in_cloud_ptr, \fBpcl::PointCloud\fP< pcl::PointXYZ >::Ptr out_cloud_ptr, float in_leaf_size=0\&.2)"
.br
.ti -1c
.RI "void \fBclipCloud\fP (const \fBpcl::PointCloud\fP< pcl::PointXYZ >::Ptr in_cloud_ptr, \fBpcl::PointCloud\fP< pcl::PointXYZ >::Ptr out_cloud_ptr, float in_min_height=\-1\&.3, float in_max_height=0\&.5)"
.br
.ti -1c
.RI "void \fBdifferenceNormalsSegmentation\fP (const \fBpcl::PointCloud\fP< pcl::PointXYZ >::Ptr in_cloud_ptr, \fBpcl::PointCloud\fP< pcl::PointXYZ >::Ptr out_cloud_ptr)"
.br
.ti -1c
.RI "void \fBremovePointsUpTo\fP (const \fBpcl::PointCloud\fP< pcl::PointXYZ >::Ptr in_cloud_ptr, \fBpcl::PointCloud\fP< pcl::PointXYZ >::Ptr out_cloud_ptr, const double in_distance)"
.br
.ti -1c
.RI "void \fBvelodyne_callback\fP (const sensor_msgs::PointCloud2ConstPtr &in_sensor_cloud)"
.br
.ti -1c
.RI "int \fBmain\fP (int argc, char **argv)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "ros::Publisher \fB_pub_cluster_cloud\fP"
.br
.ti -1c
.RI "ros::Publisher \fB_pub_ground_cloud\fP"
.br
.ti -1c
.RI "ros::Publisher \fB_centroid_pub\fP"
.br
.ti -1c
.RI "ros::Publisher \fB_pub_clusters_message\fP"
.br
.ti -1c
.RI "ros::Publisher \fB_pub_points_lanes_cloud\fP"
.br
.ti -1c
.RI "ros::Publisher \fB_pub_detected_objects\fP"
.br
.ti -1c
.RI "std_msgs::Header \fB_velodyne_header\fP"
.br
.ti -1c
.RI "std::string \fB_output_frame\fP"
.br
.ti -1c
.RI "std::vector< std::vector< \fBgeometry_msgs::Point\fP > > \fB_way_area_points\fP"
.br
.ti -1c
.RI "std::vector< cv::Scalar > \fB_colors\fP"
.br
.ti -1c
.RI "\fBpcl::PointCloud\fP< pcl::PointXYZ > \fB_sensor_cloud\fP"
.br
.ti -1c
.RI "visualization_msgs::Marker \fB_visualization_marker\fP"
.br
.ti -1c
.RI "std::vector< double > \fB_clustering_distances\fP"
.br
.ti -1c
.RI "std::vector< double > \fB_clustering_ranges\fP"
.br
.ti -1c
.RI "tf::StampedTransform * \fB_transform\fP"
.br
.ti -1c
.RI "tf::StampedTransform * \fB_velodyne_output_transform\fP"
.br
.ti -1c
.RI "tf::TransformListener * \fB_transform_listener\fP"
.br
.ti -1c
.RI "tf::TransformListener * \fB_vectormap_transform_listener\fP"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define __APP_NAME__   'euclidean_clustering'"

.PP
Definition at line 83 of file lidar_euclidean_cluster_detect\&.cpp\&.
.SH "Function Documentation"
.PP 
.SS "void checkAllForMerge (std::vector< \fBClusterPtr\fP > & in_clusters, std::vector< \fBClusterPtr\fP > & out_clusters, float in_merge_threshold)"

.PP
Definition at line 548 of file lidar_euclidean_cluster_detect\&.cpp\&.
.SS "void checkClusterMerge (size_t in_cluster_id, std::vector< \fBClusterPtr\fP > & in_clusters, std::vector< bool > & in_out_visited_clusters, std::vector< size_t > & out_merge_indices, double in_merge_threshold)"

.PP
Definition at line 496 of file lidar_euclidean_cluster_detect\&.cpp\&.
.SS "void clipCloud (const \fBpcl::PointCloud\fP< pcl::PointXYZ >::Ptr in_cloud_ptr, \fBpcl::PointCloud\fP< pcl::PointXYZ >::Ptr out_cloud_ptr, float in_min_height = \fC\-1\&.3\fP, float in_max_height = \fC0\&.5\fP)"

.PP
Definition at line 793 of file lidar_euclidean_cluster_detect\&.cpp\&.
.SS "std::vector<\fBClusterPtr\fP> clusterAndColor (const \fBpcl::PointCloud\fP< pcl::PointXYZ >::Ptr in_cloud_ptr, \fBpcl::PointCloud\fP< pcl::PointXYZRGB >::Ptr out_cloud_ptr, autoware_msgs::Centroids & in_out_centroids, double in_max_cluster_distance = \fC0\&.5\fP)"

.PP
Definition at line 442 of file lidar_euclidean_cluster_detect\&.cpp\&.
.SS "void differenceNormalsSegmentation (const \fBpcl::PointCloud\fP< pcl::PointXYZ >::Ptr in_cloud_ptr, \fBpcl::PointCloud\fP< pcl::PointXYZ >::Ptr out_cloud_ptr)"

.PP
Definition at line 806 of file lidar_euclidean_cluster_detect\&.cpp\&.
.SS "void downsampleCloud (const \fBpcl::PointCloud\fP< pcl::PointXYZ >::Ptr in_cloud_ptr, \fBpcl::PointCloud\fP< pcl::PointXYZ >::Ptr out_cloud_ptr, float in_leaf_size = \fC0\&.2\fP)"

.PP
Definition at line 784 of file lidar_euclidean_cluster_detect\&.cpp\&.
.SS "tf::StampedTransform findTransform (const std::string & in_target_frame, const std::string & in_source_frame)"

.PP
Definition at line 142 of file lidar_euclidean_cluster_detect\&.cpp\&.
.SS "void keepLanePoints (const \fBpcl::PointCloud\fP< pcl::PointXYZ >::Ptr in_cloud_ptr, \fBpcl::PointCloud\fP< pcl::PointXYZ >::Ptr out_cloud_ptr, float in_left_lane_threshold = \fC1\&.5\fP, float in_right_lane_threshold = \fC1\&.5\fP)"

.PP
Definition at line 356 of file lidar_euclidean_cluster_detect\&.cpp\&.
.SS "int main (int argc, char ** argv)"

.PP
Definition at line 963 of file lidar_euclidean_cluster_detect\&.cpp\&.
.SS "void mergeClusters (const std::vector< \fBClusterPtr\fP > & in_clusters, std::vector< \fBClusterPtr\fP > & out_clusters, std::vector< size_t > in_merge_indices, const size_t & current_index, std::vector< bool > & in_out_merged_clusters)"

.PP
Definition at line 519 of file lidar_euclidean_cluster_detect\&.cpp\&.
.SS "void publishCentroids (const ros::Publisher * in_publisher, const autoware_msgs::Centroids & in_centroids, const std::string & in_target_frame, const std_msgs::Header & in_header)"

.PP
Definition at line 307 of file lidar_euclidean_cluster_detect\&.cpp\&.
.SS "void publishCloud (const ros::Publisher * in_publisher, const \fBpcl::PointCloud\fP< pcl::PointXYZ >::Ptr in_cloud_to_publish_ptr)"

.PP
Definition at line 339 of file lidar_euclidean_cluster_detect\&.cpp\&.
.SS "void publishCloudClusters (const ros::Publisher * in_publisher, const autoware_msgs::CloudClusterArray & in_clusters, const std::string & in_target_frame, const std_msgs::Header & in_header)"

.PP
Definition at line 218 of file lidar_euclidean_cluster_detect\&.cpp\&.
.SS "void publishColorCloud (const ros::Publisher * in_publisher, const \fBpcl::PointCloud\fP< pcl::PointXYZRGB >::Ptr in_cloud_to_publish_ptr)"

.PP
Definition at line 347 of file lidar_euclidean_cluster_detect\&.cpp\&.
.SS "void publishDetectedObjects (const autoware_msgs::CloudClusterArray & in_clusters)"

.PP
Definition at line 195 of file lidar_euclidean_cluster_detect\&.cpp\&.
.SS "void removeFloor (const \fBpcl::PointCloud\fP< pcl::PointXYZ >::Ptr in_cloud_ptr, \fBpcl::PointCloud\fP< pcl::PointXYZ >::Ptr out_nofloor_cloud_ptr, \fBpcl::PointCloud\fP< pcl::PointXYZ >::Ptr out_onlyfloor_cloud_ptr, float in_max_height = \fC0\&.2\fP, float in_floor_max_angle = \fC0\&.1\fP)"

.PP
Definition at line 746 of file lidar_euclidean_cluster_detect\&.cpp\&.
.SS "void removePointsUpTo (const \fBpcl::PointCloud\fP< pcl::PointXYZ >::Ptr in_cloud_ptr, \fBpcl::PointCloud\fP< pcl::PointXYZ >::Ptr out_cloud_ptr, const double in_distance)"

.PP
Definition at line 870 of file lidar_euclidean_cluster_detect\&.cpp\&.
.SS "void segmentByDistance (const \fBpcl::PointCloud\fP< pcl::PointXYZ >::Ptr in_cloud_ptr, \fBpcl::PointCloud\fP< pcl::PointXYZRGB >::Ptr out_cloud_ptr, autoware_msgs::Centroids & in_out_centroids, autoware_msgs::CloudClusterArray & in_out_clusters)"

.PP
Definition at line 577 of file lidar_euclidean_cluster_detect\&.cpp\&.
.SS "void transformBoundingBox (const jsk_recognition_msgs::BoundingBox & in_boundingbox, jsk_recognition_msgs::BoundingBox & out_boundingbox, const std::string & in_target_frame, const std_msgs::Header & in_header)"

.PP
Definition at line 173 of file lidar_euclidean_cluster_detect\&.cpp\&.
.SS "\fBgeometry_msgs::Point\fP transformPoint (const \fBgeometry_msgs::Point\fP & point, const tf::Transform & tf)"

.PP
Definition at line 160 of file lidar_euclidean_cluster_detect\&.cpp\&.
.SS "void velodyne_callback (const sensor_msgs::PointCloud2ConstPtr & in_sensor_cloud)"

.PP
Definition at line 884 of file lidar_euclidean_cluster_detect\&.cpp\&.
.SH "Variable Documentation"
.PP 
.SS "ros::Publisher _centroid_pub"

.PP
Definition at line 89 of file lidar_euclidean_cluster_detect\&.cpp\&.
.SS "std::vector<double> _clustering_distances"

.PP
Definition at line 134 of file lidar_euclidean_cluster_detect\&.cpp\&.
.SS "std::vector<double> _clustering_ranges"

.PP
Definition at line 135 of file lidar_euclidean_cluster_detect\&.cpp\&.
.SS "std::vector<cv::Scalar> _colors"

.PP
Definition at line 129 of file lidar_euclidean_cluster_detect\&.cpp\&.
.SS "std::string _output_frame"

.PP
Definition at line 99 of file lidar_euclidean_cluster_detect\&.cpp\&.
.SS "ros::Publisher _pub_cluster_cloud"

.PP
Definition at line 87 of file lidar_euclidean_cluster_detect\&.cpp\&.
.SS "ros::Publisher _pub_clusters_message"

.PP
Definition at line 91 of file lidar_euclidean_cluster_detect\&.cpp\&.
.SS "ros::Publisher _pub_detected_objects"

.PP
Definition at line 95 of file lidar_euclidean_cluster_detect\&.cpp\&.
.SS "ros::Publisher _pub_ground_cloud"

.PP
Definition at line 88 of file lidar_euclidean_cluster_detect\&.cpp\&.
.SS "ros::Publisher _pub_points_lanes_cloud"

.PP
Definition at line 93 of file lidar_euclidean_cluster_detect\&.cpp\&.
.SS "\fBpcl::PointCloud\fP<pcl::PointXYZ> _sensor_cloud"

.PP
Definition at line 130 of file lidar_euclidean_cluster_detect\&.cpp\&.
.SS "tf::StampedTransform* _transform"

.PP
Definition at line 137 of file lidar_euclidean_cluster_detect\&.cpp\&.
.SS "tf::TransformListener* _transform_listener"

.PP
Definition at line 139 of file lidar_euclidean_cluster_detect\&.cpp\&.
.SS "tf::TransformListener* _vectormap_transform_listener"

.PP
Definition at line 140 of file lidar_euclidean_cluster_detect\&.cpp\&.
.SS "std_msgs::Header _velodyne_header"

.PP
Definition at line 97 of file lidar_euclidean_cluster_detect\&.cpp\&.
.SS "tf::StampedTransform* _velodyne_output_transform"

.PP
Definition at line 138 of file lidar_euclidean_cluster_detect\&.cpp\&.
.SS "visualization_msgs::Marker _visualization_marker"

.PP
Definition at line 131 of file lidar_euclidean_cluster_detect\&.cpp\&.
.SS "std::vector<std::vector<\fBgeometry_msgs::Point\fP> > _way_area_points"

.PP
Definition at line 128 of file lidar_euclidean_cluster_detect\&.cpp\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Autoware_Doxygen from the source code\&.
